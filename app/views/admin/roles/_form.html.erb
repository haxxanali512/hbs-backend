<%= form_with model: @role, url: (@role.persisted? ? admin_role_path(@role) : admin_roles_path), class: "space-y-6" do |f| %>
  <div class="rounded-2xl border border-gray-200 bg-white p-8 shadow-sm">
    <h3 class="text-base font-semibold text-gray-900 mb-4">Role Information</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <label class="block text-sm font-medium text-gray-700">Role Name</label>
        <%= f.text_field :role_name, class: "mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Scope</label>
        <%= f.select :scope,
            options_for_select([
              ['Global', 'global'],
              ['Tenant', 'tenant']
            ], @role.scope),
            { prompt: 'Select scope' },
            { class: "mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" } %>
      </div>
    </div>
  </div>

  <!-- Permissions -->
  <div class="rounded-2xl border border-gray-200 bg-white p-8 shadow-sm">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-base font-semibold text-gray-900">Permissions</h3>
      <div class="flex items-center gap-3">
        <button type="button" id="selectAllPermissions" class="inline-flex items-center rounded-md border border-gray-200 px-3 py-1.5 text-xs font-medium text-gray-700 hover:bg-gray-50">Select all</button>
        <button type="button" id="clearAllPermissions" class="inline-flex items-center rounded-md border border-gray-200 px-3 py-1.5 text-xs font-medium text-gray-700 hover:bg-gray-50">Clear all</button>
      </div>
    </div>

    <% (@permissions || @role.access || {}).each do |module_key, submodules| %>
      <div class="mb-6">
        <div class="rounded-md border border-gray-200 bg-gray-50">
          <div class="px-4 py-3 font-semibold text-gray-900"><%= module_key.to_s.humanize %></div>
          <div class="p-4 space-y-6 bg-white">
            <% (submodules || {}).each do |submodule_key, actions| %>
              <div>
                <div class="text-sm font-medium text-gray-900 mb-3"><%= submodule_key.to_s.humanize %></div>
                <div class="grid grid-cols-2 sm:grid-cols-5 md:grid-cols-6 gap-x-8 gap-y-3 text-sm">
                  <% action_order = %i[index show create update destroy] %>
                  <% action_order.each do |action_key| %>
                    <% raw_value = (actions || {})[action_key] %>
                    <% value = ActiveModel::Type::Boolean.new.cast(raw_value) %>
                    <label class="inline-flex items-center gap-2 text-gray-700">
                      <%= check_box_tag "role[access][#{module_key}][#{submodule_key}][#{action_key}]", "1", value, class: "perm-toggle h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500", data: { module: module_key, submodule: submodule_key } %>
                      <span class="capitalize"><%= action_key %></span>
                    </label>
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    <% end %>
  </div>

  <div class="flex items-center justify-end gap-4">
    <%= link_to "Cancel", admin_roles_path, class: "text-sm text-gray-700 hover:text-gray-900" %>
    <%= f.submit (@role.persisted? ? "Update Role" : "Create Role"), class: "inline-flex items-center rounded-lg bg-indigo-600 px-5 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-indigo-700" %>
  </div>
<% end %>

<script>
document.addEventListener('turbo:load', function() {
  var selectAll = document.getElementById('selectAllPermissions');
  var clearAll = document.getElementById('clearAllPermissions');
  if (selectAll) {
    selectAll.addEventListener('click', function() {
      document.querySelectorAll('input.perm-toggle[type="checkbox"]').forEach(function(cb){ cb.checked = true; });
    });
  }
  if (clearAll) {
    clearAll.addEventListener('click', function() {
      document.querySelectorAll('input.perm-toggle[type="checkbox"]').forEach(function(cb){ cb.checked = false; });
    });
  }
});
</script>