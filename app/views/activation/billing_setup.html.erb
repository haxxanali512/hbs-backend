<div class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
  <!-- Header -->
  <div class="mb-8">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Billing Setup</h1>
        <p class="mt-2 text-gray-600">Configure your billing information and payment method</p>
      </div>
      <div class="text-sm text-gray-500">
        Step 2 of 5
      </div>
    </div>
  </div>

  <!-- Progress Bar -->
  <div class="mb-8">
    <div class="flex items-center justify-between mb-2">
      <span class="text-sm font-medium text-gray-700">Progress</span>
      <span class="text-sm font-medium text-gray-700">25%</span>
    </div>
    <div class="w-full bg-gray-200 rounded-full h-2">
      <div class="bg-indigo-600 h-2 rounded-full transition-all duration-300" style="width: 25%"></div>
    </div>
  </div>

  <!-- Form -->
  <%= form_with model: [@organization, @billing], url: activation_billing_path, local: true, class: "space-y-6" do |f| %>
    <div class="rounded-2xl border border-gray-200 bg-white p-8 shadow-sm">
      <h3 class="text-base font-semibold text-gray-900 mb-4">Billing Information</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Billing Status -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Billing Status</label>
          <%= f.select :billing_status, 
              options_for_select([
                ['Active', 'active'],
                ['Pending', 'pending'],
                ['Cancelled', 'cancelled'],
                ['Pending Approval', 'pending_approval']
              ], @billing.billing_status), 
              { prompt: 'Select billing status' },
              { class: "mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" } %>
        </div>

        <!-- Provider -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Payment Provider</label>
          <%= f.select :provider, 
              options_for_select([
                ['Stripe', 'stripe'],
                ['GoCardless (Direct Debit)', 'gocardless'],
                ['Manual (Super Admin Approval)', 'manual'],
                ['Zelle', 'zelle'],
                ['Bank Transfer', 'bank_transfer']
              ], @billing.provider), 
              { prompt: 'Select payment provider' },
              { 
                class: "mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500",
                id: "payment_provider",
                onchange: "handleProviderChange(this.value)"
              } %>
        </div>

        <!-- Last Payment Date -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Last Payment Date</label>
          <%= f.date_field :last_payment_date, 
              class: "mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
        </div>

        <!-- Next Payment Due -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Next Payment Due</label>
          <%= f.date_field :next_payment_due, 
              class: "mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
        </div>

        <!-- Method Last 4 -->
        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-gray-700">Payment Method (Last 4 digits)</label>
          <%= f.text_field :method_last4, 
              placeholder: "1234",
              class: "mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
        </div>
      </div>

      <!-- Stripe Product Selection (Hidden by default) -->
      <div id="stripe_products_section" class="hidden mt-6">
        <h4 class="text-sm font-medium text-gray-900 mb-3">Select a Plan</h4>
        <div id="stripe_products_loading" class="text-center py-4">
          <div class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Loading products...
          </div>
        </div>
        <div id="stripe_products_list" class="hidden space-y-3"></div>
        <div id="stripe_products_error" class="hidden text-red-600 text-sm"></div>
      </div>

      <!-- GoCardless Direct Debit Setup (Hidden by default) -->
      <div id="gocardless_section" class="hidden mt-6">
        <h4 class="text-sm font-medium text-gray-900 mb-3">Direct Debit Setup</h4>
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-yellow-800">Direct Debit Authorization</h3>
              <div class="mt-2 text-sm text-yellow-700">
                <p>GoCardless will redirect you to your bank to set up direct debit authorization. This is a secure process that allows us to collect payments directly from your bank account.</p>
              </div>
            </div>
          </div>
        </div>
        
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Payment Type</label>
            <div class="space-y-2">
              <label class="flex items-center">
                <input type="radio" name="gocardless_payment_type" value="one_time" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300" checked>
                <span class="ml-2 text-sm text-gray-700">One-time payment</span>
              </label>
              <label class="flex items-center">
                <input type="radio" name="gocardless_payment_type" value="subscription" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300">
                <span class="ml-2 text-sm text-gray-700">Recurring subscription</span>
              </label>
            </div>
          </div>

          <div id="gocardless_amount_section">
            <label class="block text-sm font-medium text-gray-700">Amount (in pence)</label>
            <input type="number" id="gocardless_amount" placeholder="5000" class="mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            <p class="mt-1 text-xs text-gray-500">Enter amount in pence (e.g., 5000 = Â£50.00)</p>
          </div>

          <div id="gocardless_subscription_section" class="hidden">
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700">Interval Unit</label>
                <select id="gocardless_interval_unit" class="mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                  <option value="monthly">Monthly</option>
                  <option value="yearly">Yearly</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Interval</label>
                <input type="number" id="gocardless_interval" value="1" min="1" class="mt-2 block w-full h-11 rounded-lg border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
              </div>
            </div>
          </div>

          <div class="flex space-x-3">
            <button onclick="setupGoCardlessDirectDebit()" class="inline-flex items-center rounded-lg bg-indigo-600 px-5 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-indigo-700">
              <svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
              </svg>
              Set Up Direct Debit
            </button>
            <button onclick="cancelGoCardlessSetup()" class="inline-flex items-center rounded-lg border border-gray-200 px-5 py-2.5 text-sm font-medium text-gray-700 hover:bg-gray-50">
              Cancel
            </button>
          </div>
        </div>

        <div id="gocardless_loading" class="hidden text-center py-4">
          <div class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Setting up direct debit...
          </div>
        </div>
        <div id="gocardless_error" class="hidden text-red-600 text-sm"></div>
      </div>

      <!-- Manual Payment Method (Super Admin Approval) -->
      <div id="manual_section" class="hidden mt-6">
        <h4 class="text-sm font-medium text-gray-900 mb-3">Manual Payment Setup</h4>
        <div class="bg-yellow-100 border-2 border-yellow-300 rounded-lg p-4 mb-4 shadow-sm">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-yellow-600" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-semibold text-yellow-900">Manual Payment Processing</h3>
              <div class="mt-2 text-sm text-yellow-800">
                <p>Your payment will be processed manually by our team. A super admin will review and approve your billing setup. You'll receive an email notification once approved.</p>
              </div>
            </div>
          </div>
        </div>
        
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700">Payment Details</label>
            <textarea id="manual_payment_details" rows="3" placeholder="Please provide any specific payment details or instructions..." class="mt-2 block w-full rounded-lg border border-gray-200 bg-white px-4 py-2.5 text-sm placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"></textarea>
            <p class="mt-1 text-xs text-gray-500">Optional: Add any specific payment instructions or details</p>
          </div>

          <div class="flex space-x-3">
            <button onclick="submitManualPayment()" class="inline-flex items-center rounded-lg bg-yellow-600 px-5 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-yellow-700">
              <svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Submit for Manual Processing
            </button>
            <button onclick="cancelManualSetup()" class="inline-flex items-center rounded-lg border border-gray-200 px-5 py-2.5 text-sm font-medium text-gray-700 hover:bg-gray-50">
              Cancel
            </button>
          </div>
        </div>

        <div id="manual_loading" class="hidden text-center py-4">
          <div class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-yellow-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Submitting for manual processing...
          </div>
        </div>
        <div id="manual_error" class="hidden text-red-600 text-sm"></div>
      </div>

      <!-- Form Actions -->
      <div class="mt-6 flex items-center justify-between">
        <%= link_to "Back to Overview", activation_path, class: "text-sm text-gray-700 hover:text-gray-900" %>
        
        <div class="flex space-x-3">
          <%= link_to "Setup Later", activation_compliance_path, class: "inline-flex items-center rounded-lg border border-gray-200 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50" %>
          <%= f.submit "Continue to Compliance", class: "inline-flex items-center rounded-lg bg-indigo-600 px-5 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-indigo-700" %>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script>
function handleProviderChange(provider) {
  const stripeSection = document.getElementById('stripe_products_section');
  const gocardlessSection = document.getElementById('gocardless_section');
  const manualSection = document.getElementById('manual_section');

  // Hide all sections first
  stripeSection.classList.add('hidden');
  gocardlessSection.classList.add('hidden');
  manualSection.classList.add('hidden');

  if (provider === 'stripe') {
    stripeSection.classList.remove('hidden');
    loadStripeProducts();
  } else if (provider === 'gocardless') {
    gocardlessSection.classList.remove('hidden');
    setupGoCardlessPaymentTypeHandlers();
  } else if (provider === 'manual') {
    manualSection.classList.remove('hidden');
  }
}

function loadStripeProducts() {
  const loadingDiv = document.getElementById('stripe_products_loading');
  const productsList = document.getElementById('stripe_products_list');
  const errorDiv = document.getElementById('stripe_products_error');

  // Show loading state
  loadingDiv.classList.remove('hidden');
  productsList.classList.add('hidden');
  errorDiv.classList.add('hidden');

  // Fetch products from Stripe
  fetch('/stripe/products')
    .then(response => response.json())
    .then(data => {
      loadingDiv.classList.add('hidden');
      
      if (data.success) {
        displayProducts(data.products);
      } else {
        showError(data.error);
      }
    })
    .catch(error => {
      loadingDiv.classList.add('hidden');
      showError('Failed to load products. Please try again.');
    });
}

function displayProducts(products) {
  const productsList = document.getElementById('stripe_products_list');
  productsList.innerHTML = '';

  if (products.length === 0) {
    productsList.innerHTML = '<p class="text-gray-500 text-sm">No products available.</p>';
  } else {
    products.forEach(product => {
      const productDiv = document.createElement('div');
      productDiv.className = 'border border-gray-200 rounded-lg p-4 hover:bg-gray-50 cursor-pointer';
      productDiv.onclick = () => selectProduct(product.id);
      
      productDiv.innerHTML = `
        <div class="flex items-center justify-between">
          <div>
            <h5 class="text-sm font-medium text-gray-900">${product.name}</h5>
            <p class="text-xs text-gray-500 mt-1">${product.description || 'No description available'}</p>
          </div>
          <div class="text-right">
            <span class="text-sm font-medium text-indigo-600">Select Plan</span>
          </div>
        </div>
      `;
      
      productsList.appendChild(productDiv);
    });
  }

  productsList.classList.remove('hidden');
}

function selectProduct(productId) {
  // Load prices for the selected product
  fetch(`/stripe/products/${productId}/prices`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showPriceSelection(productId, data.prices);
      } else {
        showError(data.error);
      }
    })
    .catch(error => {
      showError('Failed to load pricing. Please try again.');
    });
}

function showPriceSelection(productId, prices) {
  const productsList = document.getElementById('stripe_products_list');
  
  if (prices.length === 0) {
    showError('No pricing available for this product.');
    return;
  }

  // Create price selection UI
  const priceSelectionDiv = document.createElement('div');
  priceSelectionDiv.className = 'mt-4 p-4 bg-gray-50 rounded-lg';
  priceSelectionDiv.innerHTML = `
    <h6 class="text-sm font-medium text-gray-900 mb-3">Select Pricing</h6>
    <div class="space-y-2">
      ${prices.map(price => `
        <label class="flex items-center p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-white">
          <input type="radio" name="price_selection" value="${price.id}" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300">
          <div class="ml-3 flex-1">
            <div class="text-sm font-medium text-gray-900">
              ${formatPrice(price.amount)} ${price.currency.toUpperCase()}
              ${price.recurring ? `/${price.recurring.interval}` : ''}
            </div>
            <div class="text-xs text-gray-500">${price.type === 'recurring' ? 'Subscription' : 'One-time payment'}</div>
          </div>
        </label>
      `).join('')}
    </div>
    <div class="mt-4 flex space-x-3">
      <button onclick="proceedToCheckout('${productId}')" class="inline-flex items-center rounded-lg bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700">
        Proceed to Checkout
      </button>
      <button onclick="cancelPriceSelection()" class="inline-flex items-center rounded-lg border border-gray-200 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">
        Cancel
      </button>
    </div>
  `;

  productsList.appendChild(priceSelectionDiv);
}

function proceedToCheckout(productId) {
  const selectedPrice = document.querySelector('input[name="price_selection"]:checked');
  
  if (!selectedPrice) {
    showError('Please select a pricing option.');
    return;
  }

  const priceId = selectedPrice.value;
  
  // Create checkout session
  fetch('/stripe/create_checkout_session', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
      product_id: productId,
      price_id: priceId,
      mode: 'payment', // or 'subscription' for recurring payments
      success_url: window.location.origin + '/activation/complete',
      cancel_url: window.location.href
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Redirect to Stripe checkout
      window.location.href = data.session_url;
    } else {
      showError(data.error);
    }
  })
  .catch(error => {
    showError('Failed to create checkout session. Please try again.');
  });
}

function cancelPriceSelection() {
  const productsList = document.getElementById('stripe_products_list');
  const priceSelectionDiv = productsList.querySelector('.bg-gray-50');
  if (priceSelectionDiv) {
    priceSelectionDiv.remove();
  }
}

function formatPrice(amount) {
  return (amount / 100).toFixed(2);
}

function showError(message) {
  const errorDiv = document.getElementById('stripe_products_error');
  errorDiv.textContent = message;
  errorDiv.classList.remove('hidden');
  
  // Hide other sections
  document.getElementById('stripe_products_loading').classList.add('hidden');
  document.getElementById('stripe_products_list').classList.add('hidden');
}

// GoCardless Functions
function setupGoCardlessPaymentTypeHandlers() {
  const paymentTypeRadios = document.querySelectorAll('input[name="gocardless_payment_type"]');
  const subscriptionSection = document.getElementById('gocardless_subscription_section');
  
  paymentTypeRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      if (this.value === 'subscription') {
        subscriptionSection.classList.remove('hidden');
      } else {
        subscriptionSection.classList.add('hidden');
      }
    });
  });
}

function setupGoCardlessDirectDebit() {
  const loadingDiv = document.getElementById('gocardless_loading');
  const errorDiv = document.getElementById('gocardless_error');
  const amount = document.getElementById('gocardless_amount').value;
  const paymentType = document.querySelector('input[name="gocardless_payment_type"]:checked').value;
  
  // Validate amount
  if (!amount || amount <= 0) {
    showGoCardlessError('Please enter a valid amount.');
    return;
  }

  // Show loading state
  loadingDiv.classList.remove('hidden');
  errorDiv.classList.add('hidden');

  // Prepare redirect flow parameters
  const redirectParams = {
    success_redirect_url: window.location.origin + '/activation/complete'
  };

  // Create redirect flow
  fetch('/gocardless/create_redirect_flow', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify(redirectParams)
  })
  .then(response => response.json())
  .then(data => {
    loadingDiv.classList.add('hidden');
    
    if (data.success) {
      // Store payment details in session storage for after redirect
      sessionStorage.setItem('gocardless_payment_type', paymentType);
      sessionStorage.setItem('gocardless_amount', amount);
      
      if (paymentType === 'subscription') {
        sessionStorage.setItem('gocardless_interval_unit', document.getElementById('gocardless_interval_unit').value);
        sessionStorage.setItem('gocardless_interval', document.getElementById('gocardless_interval').value);
      }
      
      // Redirect to GoCardless
      window.location.href = data.redirect_url;
    } else {
      showGoCardlessError(data.error);
    }
  })
  .catch(error => {
    loadingDiv.classList.add('hidden');
    showGoCardlessError('Failed to set up direct debit. Please try again.');
  });
}

function cancelGoCardlessSetup() {
  const gocardlessSection = document.getElementById('gocardless_section');
  gocardlessSection.classList.add('hidden');
  
  // Reset form
  document.getElementById('gocardless_amount').value = '';
  document.querySelector('input[name="gocardless_payment_type"][value="one_time"]').checked = true;
  document.getElementById('gocardless_subscription_section').classList.add('hidden');
}

function showGoCardlessError(message) {
  const errorDiv = document.getElementById('gocardless_error');
  errorDiv.textContent = message;
  errorDiv.classList.remove('hidden');
  
  // Hide loading
  document.getElementById('gocardless_loading').classList.add('hidden');
}

// Handle GoCardless redirect completion
function handleGoCardlessRedirect() {
  const urlParams = new URLSearchParams(window.location.search);
  const redirectFlowId = urlParams.get('redirect_flow_id');
  
  if (redirectFlowId) {
    // Complete the redirect flow
    fetch(`/gocardless/redirect_flow/${redirectFlowId}/complete`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Create payment or subscription based on stored type
        const paymentType = sessionStorage.getItem('gocardless_payment_type');
        const amount = sessionStorage.getItem('gocardless_amount');
        
        if (paymentType === 'subscription') {
          createGoCardlessSubscription(data.mandate_id, amount);
        } else {
          createGoCardlessPayment(data.mandate_id, amount);
        }
        
        // Clean up session storage
        sessionStorage.removeItem('gocardless_payment_type');
        sessionStorage.removeItem('gocardless_amount');
        sessionStorage.removeItem('gocardless_interval_unit');
        sessionStorage.removeItem('gocardless_interval');
      } else {
        showGoCardlessError(data.error);
      }
    })
    .catch(error => {
      showGoCardlessError('Failed to complete direct debit setup.');
    });
  }
}

function createGoCardlessPayment(mandateId, amount) {
  fetch('/gocardless/payments', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
      mandate_id: mandateId,
      amount: parseInt(amount),
      currency: 'GBP'
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Redirect to success page
      window.location.href = '/activation/complete';
    } else {
      showGoCardlessError(data.error);
    }
  });
}

function createGoCardlessSubscription(mandateId, amount) {
  const intervalUnit = sessionStorage.getItem('gocardless_interval_unit') || 'monthly';
  const interval = sessionStorage.getItem('gocardless_interval') || '1';
  
  fetch('/gocardless/subscriptions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
      mandate_id: mandateId,
      amount: parseInt(amount),
      currency: 'GBP',
      interval_unit: intervalUnit,
      interval: parseInt(interval)
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Redirect to success page
      window.location.href = '/activation/complete';
    } else {
      showGoCardlessError(data.error);
    }
  });
}

// Manual Payment Functions
function submitManualPayment() {
  const loadingDiv = document.getElementById('manual_loading');
  const errorDiv = document.getElementById('manual_error');
  const paymentDetails = document.getElementById('manual_payment_details').value;

  // Show loading state
  loadingDiv.classList.remove('hidden');
  errorDiv.classList.add('hidden');

  // Submit manual payment request
  fetch('/activation/manual_payment', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
      payment_details: paymentDetails
    })
  })
  .then(response => response.json())
  .then(data => {
    loadingDiv.classList.add('hidden');
    
    if (data.success) {
      // Show success message and redirect
      alert('Manual payment request submitted successfully! A super admin will review and approve your billing setup.');
      window.location.href = '/activation/compliance';
    } else {
      showManualError(data.error || 'Failed to submit manual payment request.');
    }
  })
  .catch(error => {
    loadingDiv.classList.add('hidden');
    showManualError('Failed to submit manual payment request. Please try again.');
  });
}

function cancelManualSetup() {
  const manualSection = document.getElementById('manual_section');
  manualSection.classList.add('hidden');
  
  // Reset form
  document.getElementById('manual_payment_details').value = '';
}

function showManualError(message) {
  const errorDiv = document.getElementById('manual_error');
  errorDiv.textContent = message;
  errorDiv.classList.remove('hidden');
  
  // Hide loading
  document.getElementById('manual_loading').classList.add('hidden');
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  const providerSelect = document.getElementById('payment_provider');
  if (providerSelect.value === 'stripe') {
    handleProviderChange('stripe');
  } else if (providerSelect.value === 'gocardless') {
    handleProviderChange('gocardless');
  } else if (providerSelect.value === 'manual') {
    handleProviderChange('manual');
  }
  
  // Check for GoCardless redirect
  handleGoCardlessRedirect();
});
</script>
