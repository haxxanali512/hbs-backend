<div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
  <!-- Modern Header -->
  <div class="bg-white/80 backdrop-blur-sm border-b border-gray-200/50 sticky top-0 z-10">
    <div class="px-6 py-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
            </svg>
          </div>
          <div>
            <h1 class="text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">Billing Setup</h1>
            <p class="text-sm text-gray-500">Configure your payment method and billing preferences</p>
          </div>
        </div>
        <div class="flex items-center space-x-3">
          <div class="text-right">
            <p class="text-sm font-medium text-gray-900"><%= current_user.email %></p>
            <p class="text-xs text-gray-500">Account Manager</p>
          </div>
          <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
            <span class="text-white font-semibold text-sm"><%= current_user.email.first.upcase %></span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Main content -->
  <div class="max-w-6xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <!-- Progress indicator -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-3xl font-bold text-gray-900">Payment Configuration</h2>
        <div class="flex items-center space-x-2 text-sm text-gray-500">
          <span>Step 2 of 4</span>
          <div class="w-16 h-1 bg-gray-200 rounded-full">
            <div class="w-8 h-1 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full"></div>
          </div>
        </div>
      </div>
      <p class="text-lg text-gray-600">Set up your payment method to enable billing for our services</p>
    </div>
    <div class="space-y-6">
      <%= form_with model: [@organization, @billing], url: tenant_activation_billing_path, method: :patch, local: true, class: "space-y-6" do |form| %>
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
          <h3 class="text-xl font-bold text-gray-900 mb-4">Payment Information</h3>
          <p class="text-lg text-gray-600 mb-8">Please provide your billing information to continue with the activation process.</p>
          
          <% if @billing.errors.any? %>
            <div class="bg-red-50 border border-red-200 rounded-xl p-6 mb-8">
              <div class="flex items-start">
                <div class="flex-shrink-0">
                  <svg class="h-6 w-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div class="ml-4">
                  <h3 class="text-lg font-semibold text-red-800">Please fix the following errors:</h3>
                  <div class="mt-2 text-red-700">
                    <ul class="list-disc pl-5 space-y-1">
                      <% @billing.errors.full_messages.each do |message| %>
                        <li><%= message %></li>
                      <% end %>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          <% end %>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-semibold text-gray-700 mb-2">Payment Provider</label>
              <%= form.select :provider, options_for_select([
                ['Stripe', 'stripe'],
                ['GoCardless', 'gocardless'],
                ['Manual Payment', 'manual']
              ], @billing.provider), { prompt: 'Select a payment provider' }, { class: "mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-blue-500 transition-colors duration-200", id: "billing_provider_select" } %>
            </div>

            <div>
              <label class="block text-sm font-semibold text-gray-700 mb-2">Payment Method (Last 4 digits)</label>
              <%= form.text_field :method_last4, placeholder: "1234", class: "mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-blue-500 transition-colors duration-200" %>
            </div>

            <div>
              <label class="block text-sm font-semibold text-gray-700 mb-2">Last Payment Date</label>
              <%= form.date_field :last_payment_date, class: "mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-blue-500 transition-colors duration-200" %>
            </div>

            <div>
              <label class="block text-sm font-semibold text-gray-700 mb-2">Next Payment Due</label>
              <%= form.date_field :next_payment_due, class: "mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-blue-500 transition-colors duration-200" %>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex items-center justify-between pt-8 border-t border-gray-100">
          <%= link_to tenant_dashboard_path, class: "group inline-flex items-center px-6 py-3 text-gray-600 hover:text-gray-900 font-medium transition-colors duration-200" do %>
            <svg class="w-5 h-5 mr-2 group-hover:-translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to Dashboard
          <% end %>
          
          <div class="flex space-x-4">
            <button type="button" id="manual-payment-btn" class="group inline-flex items-center px-6 py-3 text-gray-600 hover:text-gray-900 font-medium transition-colors duration-200">
              <svg class="w-5 h-5 mr-2 group-hover:animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"></path>
              </svg>
              Request Manual Payment
            </button>
            <%= form.submit "Save Billing Information", class: "group inline-flex items-center px-8 py-4 text-lg font-semibold text-white bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl shadow-lg hover:shadow-xl hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-4 focus:ring-blue-500/50 transition-all duration-300 transform hover:scale-105" do %>
              <svg class="w-5 h-5 mr-3 group-hover:animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Save Billing Information
            <% end %>
          </div>
        </div>
      <% end %>

      <!-- Stripe Card Setup Section (shown when provider == 'stripe') -->
      <div id="stripe-card-section" class="mt-8 hidden">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
          <div class="text-center mb-8">
            <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-gradient-to-r from-blue-100 to-indigo-100 mb-6">
              <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-6 4h12a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 mb-3">Add Your Payment Card</h3>
            <p class="text-lg text-gray-600">We'll securely save your card for monthly billing. Your payment information is encrypted and processed by Stripe.</p>
          </div>

          <!-- Card form -->
          <form id="card-form">
            <div class="space-y-6">
              <!-- Card element container -->
              <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Card Details</label>
                <div id="card-element" class="p-4 border border-gray-200 rounded-xl bg-white">
                  <!-- Stripe Elements will create form elements here -->
                </div>
                <div id="card-errors" class="mt-2 text-sm text-red-600 hidden"></div>
              </div>

              <!-- Submit button -->
              <div class="flex justify-center">
                <button type="submit" id="submit-card" class="group inline-flex items-center px-8 py-4 text-lg font-semibold text-white bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl shadow-lg hover:shadow-xl hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-4 focus:ring-blue-500/50 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105">
                  <svg class="w-5 h-5 mr-3 group-hover:animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  <span id="card-button-text">Save Card</span>
                  <span id="card-button-spinner" class="hidden">
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Saving...
                  </span>
            </button>
              </div>
            </div>
          </form>
        </div>
      </div>

      <!-- GoCardless Setup Section (shown when provider == 'gocardless') -->
      <div id="gocardless-section" class="mt-8 hidden">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
          <div class="text-center mb-8">
            <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-gradient-to-r from-green-100 to-emerald-100 mb-6">
              <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-6 4h12a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 mb-3">Set Up Direct Debit</h3>
            <p class="text-lg text-gray-600">Authorize direct debit payments from your bank account. This is a secure and convenient way to pay your monthly bills.</p>
            
            <!-- Success message for GoCardless setup -->
            <% if params[:gocardless] == 'success' %>
              <div class="mt-4 p-4 bg-green-50 border border-green-200 rounded-xl">
                <div class="flex items-center">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                  </div>
                  <div class="ml-3">
                    <p class="text-sm font-medium text-green-800">Direct debit authorization completed successfully!</p>
                  </div>
                </div>
              </div>
            <% end %>
            
            <!-- Existing GoCardless setup status -->
            <% if @billing&.gocardless? && @billing.gocardless_customer_id.present? %>
              <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-xl">
                <div class="flex items-center">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div class="ml-3">
                    <p class="text-sm font-medium text-blue-800">Direct debit is already set up and active</p>
                    <p class="text-xs text-blue-600 mt-1">Customer ID: <%= @billing.gocardless_customer_id %></p>
                  </div>
                </div>
              </div>
            <% end %>
          </div>

          <!-- GoCardless form -->
          <form id="gocardless-form">
            <div class="space-y-6">
              <!-- Customer details -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">First Name</label>
                  <input type="text" id="gc-given-name" value="<%= current_user.first_name %>" class="mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-green-500 focus:ring-green-500 transition-colors duration-200" placeholder="John" required>
                </div>
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">Last Name</label>
                  <input type="text" id="gc-family-name" value="<%= current_user.last_name %>" class="mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-green-500 focus:ring-green-500 transition-colors duration-200" placeholder="Doe" required>
                </div>
              </div>

              <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
                <input type="email" id="gc-email" value="<%= current_user.email %>" class="mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-green-500 focus:ring-green-500 transition-colors duration-200" placeholder="john@example.com" required>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">Address Line 1</label>
                  <input type="text" id="gc-address-line1" class="mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-green-500 focus:ring-green-500 transition-colors duration-200" placeholder="123 Main Street" required>
                </div>
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">City</label>
                  <input type="text" id="gc-city" class="mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-green-500 focus:ring-green-500 transition-colors duration-200" placeholder="London" required>
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">Postal Code</label>
                  <input type="text" id="gc-postal-code" class="mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-green-500 focus:ring-green-500 transition-colors duration-200" placeholder="SW1A 1AA" required>
                </div>
                <div>
                  <label class="block text-sm font-semibold text-gray-700 mb-2">Country</label>
                  <select id="gc-country-code" class="mt-2 block w-full h-12 rounded-xl border border-gray-200 bg-white px-4 text-sm placeholder-gray-400 shadow-sm focus:border-green-500 focus:ring-green-500 transition-colors duration-200" required>
                    <option value="GB">United Kingdom</option>
                    <option value="US">United States</option>
                    <option value="CA">Canada</option>
                    <option value="AU">Australia</option>
                    <option value="DE">Germany</option>
                    <option value="FR">France</option>
                    <option value="ES">Spain</option>
                    <option value="IT">Italy</option>
                    <option value="NL">Netherlands</option>
                    <option value="BE">Belgium</option>
                  </select>
                </div>
              </div>

              <!-- Error display -->
              <div id="gc-errors" class="hidden bg-red-50 border border-red-200 rounded-xl p-4">
                <div class="flex items-start">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">Error</h3>
                    <div class="mt-2 text-sm text-red-700" id="gc-error-message"></div>
                  </div>
                </div>
              </div>

              <!-- Submit button -->
              <div class="flex justify-center">
                <button type="submit" id="submit-gocardless" class="group inline-flex items-center px-8 py-4 text-lg font-semibold text-white bg-gradient-to-r from-green-600 to-emerald-600 rounded-xl shadow-lg hover:shadow-xl hover:from-green-700 hover:to-emerald-700 focus:outline-none focus:ring-4 focus:ring-green-500/50 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105">
                  <svg class="w-5 h-5 mr-3 group-hover:animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                  </svg>
                  <span id="gc-button-text">Set Up Direct Debit</span>
                  <span id="gc-button-spinner" class="hidden">
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Setting up...
                  </span>
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

    <!-- Manual Payment Modal -->
    <div id="manual-payment-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
          <h3 class="text-lg font-medium text-gray-900">Manual Payment Request</h3>
          <div class="mt-2 px-7 py-3">
            <p class="text-sm text-gray-500">
              This will submit a request for manual payment processing. A super admin will review and approve your billing setup.
            </p>
          </div>
          <div class="items-center px-4 py-3">
            <button id="confirm-manual-payment" class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-24 shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">
              Confirm
            </button>
            <button id="cancel-manual-payment" class="ml-3 px-4 py-2 bg-gray-300 text-gray-800 text-base font-medium rounded-md w-24 shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const providerSelect = document.getElementById('billing_provider_select');
  const stripeCardSection = document.getElementById('stripe-card-section');
  const gocardlessSection = document.getElementById('gocardless-section');
  const cardErrors = document.getElementById('card-errors');
  const cardSuccess = document.getElementById('card-success');
  const saveCardBtn = document.getElementById('save-card-btn');

  function renderProducts(products) {
    productsGrid.innerHTML = '';
    if (!products || products.length === 0) {
      productsEmpty.classList.remove('hidden');
      return;
    }
    productsEmpty.classList.add('hidden');

    products.forEach(function(product) {
      const card = document.createElement('div');
      card.className = 'border rounded-lg p-4 bg-white shadow-sm flex flex-col';

      const title = document.createElement('h4');
      title.className = 'font-semibold text-gray-900';
      title.textContent = product.name;
      card.appendChild(title);

      if (product.description) {
        const desc = document.createElement('p');
        desc.className = 'text-sm text-gray-600 mt-1';
        desc.textContent = product.description;
        card.appendChild(desc);
      }

      const actions = document.createElement('div');
      actions.className = 'mt-4';
      const viewPricesBtn = document.createElement('button');
      viewPricesBtn.type = 'button';
      viewPricesBtn.className = 'inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50';
      viewPricesBtn.textContent = 'View Prices';
      viewPricesBtn.addEventListener('click', function() {
        fetch(`/stripe/products/${product.id}/prices`)
          .then(function(res) { return res.json(); })
          .then(function(data) {
            if (!data.success) { throw new Error(data.error || 'Failed to load prices'); }
            const pricesList = document.createElement('ul');
            pricesList.className = 'mt-2 space-y-1 text-sm text-gray-700';
            data.prices.forEach(function(price) {
              const li = document.createElement('li');
              const amount = (price.amount / 100.0).toFixed(2);
              const recurring = price.recurring ? ` / ${price.recurring.interval}` : '';
              li.textContent = `${price.currency.toUpperCase()} ${amount}${recurring}`;
              pricesList.appendChild(li);
            });
            // Replace any existing list
            const existing = card.querySelector('ul');
            if (existing) { existing.remove(); }
            card.appendChild(pricesList);
          })
          .catch(function(err) {
            productsError.textContent = err.message;
            productsError.classList.remove('hidden');
          });
      });
      actions.appendChild(viewPricesBtn);
      card.appendChild(actions);

      productsGrid.appendChild(card);
    });
  }

  // Initialize Stripe Elements
  let stripe, elements, cardElement;
  
  function initStripe() {
    if (stripe) return;
    
    // Check if Stripe is loaded
    if (typeof Stripe === 'undefined') {
      console.error('Stripe.js not loaded');
      showError('Stripe.js not loaded. Please refresh the page.');
      return;
    }
    
    const publishableKey = '<%= Rails.configuration.stripe[:publishable_key] %>';
    console.log('Publishable key in billing setup:', publishableKey);
    if (!publishableKey || publishableKey === '' || publishableKey === 'null') {
      console.error('Stripe publishable key not configured:', publishableKey);
      showError('Stripe not configured. Please contact support.');
      return;
    }
    
    try {
      stripe = Stripe(publishableKey);
      elements = stripe.elements({
        appearance: {
          theme: 'stripe',
          variables: {
            colorPrimary: '#4f46e5',
            colorBackground: '#ffffff',
            colorText: '#1f2937',
            colorDanger: '#ef4444',
            fontFamily: 'Inter, system-ui, sans-serif',
            spacingUnit: '4px',
            borderRadius: '6px',
          }
        }
      });
      
      cardElement = elements.create('card', {
        style: {
          base: {
            fontSize: '16px',
            color: '#1f2937',
            '::placeholder': {
              color: '#9ca3af',
            },
          },
        },
      });
      
      cardElement.mount('#card-element');
      
      // Listen for real-time validation errors from the card Element
      cardElement.on('change', function(event) {
        if (event.error) {
          showError(event.error.message);
        } else {
          hideError();
        }
      });
      
    } catch (error) {
      console.error('Error initializing Stripe:', error);
      showError('Failed to initialize payment form. Please refresh the page.');
    }
  }
  
  function handleStripeSelection() {
    stripeCardSection.classList.remove('hidden');
    // Small delay to ensure Stripe.js is loaded
    setTimeout(initStripe, 100);
  }
  
  function showError(message) {
    const errorElement = document.getElementById('card-errors');
    errorElement.textContent = message;
    errorElement.classList.remove('hidden');
  }

  function hideError() {
    const errorElement = document.getElementById('card-errors');
    errorElement.classList.add('hidden');
  }

  function setLoading(loading) {
    const button = document.getElementById('submit-button');
    const buttonText = document.getElementById('button-text');
    const buttonSpinner = document.getElementById('button-spinner');
    
    if (loading) {
      button.disabled = true;
      buttonText.classList.add('hidden');
      buttonSpinner.classList.remove('hidden');
    } else {
      button.disabled = false;
      buttonText.classList.remove('hidden');
      buttonSpinner.classList.add('hidden');
    }
  }

  function handleProviderUI(value) {
    if (value === 'stripe') {
      handleStripeSelection();
      gocardlessSection.classList.add('hidden');
    } else if (value === 'gocardless') {
      handleGoCardlessSelection();
      stripeCardSection.classList.add('hidden');
    } else {
      stripeCardSection.classList.add('hidden');
      gocardlessSection.classList.add('hidden');
    }
  }

  function handleGoCardlessSelection() {
    gocardlessSection.classList.remove('hidden');
    
    // Hide the form if GoCardless is already set up
    const gocardlessForm = document.getElementById('gocardless-form');
    const isAlreadySetup = gocardlessSection.querySelector('.bg-blue-50');
    if (isAlreadySetup && gocardlessForm) {
      gocardlessForm.style.display = 'none';
    }
  }

  if (providerSelect) {
    handleProviderUI(providerSelect.value);
    providerSelect.addEventListener('change', function(e) {
      handleProviderUI(e.target.value);
    });
  }

  // Handle card form submission
  const cardForm = document.getElementById('card-form');
  if (cardForm) {
    cardForm.addEventListener('submit', async function(event) {
      event.preventDefault();
      
      setLoading(true);
      hideError();

      try {
        // Create setup intent
        const response = await fetch('/stripe/setup_intent', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          }
        });

        const { client_secret } = await response.json();

        // Confirm card setup
        const { error, setupIntent } = await stripe.confirmCardSetup(client_secret, {
          payment_method: {
            card: cardElement,
            billing_details: {
              name: document.getElementById('cardholder-name').value,
              email: document.getElementById('cardholder-email').value
            }
          }
        });

        if (error) {
          showError(error.message);
        } else {
          // Save the payment method
          const saveResponse = await fetch('/stripe/confirm_card', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ payment_method_id: setupIntent.payment_method })
          });

          const saveResult = await saveResponse.json();
          
          if (saveResult.success) {
            // Show success and redirect to next step
            alert('Card saved successfully!');
            window.location.href = '<%= tenant_activation_compliance_path %>';
          } else {
            showError(saveResult.error || 'Failed to save card');
          }
        }
      } catch (error) {
        console.error('Error:', error);
        showError('An error occurred. Please try again.');
      } finally {
        setLoading(false);
      }
    });
  }
  const manualPaymentBtn = document.getElementById('manual-payment-btn');
  const modal = document.getElementById('manual-payment-modal');
  const confirmBtn = document.getElementById('confirm-manual-payment');
  const cancelBtn = document.getElementById('cancel-manual-payment');

  manualPaymentBtn.addEventListener('click', function() {
    modal.classList.remove('hidden');
  });

  cancelBtn.addEventListener('click', function() {
    modal.classList.add('hidden');
  });

  confirmBtn.addEventListener('click', function() {
    // Submit manual payment request
    fetch('<%= tenant_activation_manual_payment_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert(data.message);
        modal.classList.add('hidden');
        location.reload();
      } else {
        alert(data.error);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    });
  });

  // Handle GoCardless form submission
  const gocardlessForm = document.getElementById('gocardless-form');
  if (gocardlessForm) {
    gocardlessForm.addEventListener('submit', async function(event) {
      event.preventDefault();
      
      const button = document.getElementById('submit-gocardless');
      const buttonText = document.getElementById('gc-button-text');
      const buttonSpinner = document.getElementById('gc-button-spinner');
      const errorDiv = document.getElementById('gc-errors');
      const errorMessage = document.getElementById('gc-error-message');
      
      // Set loading state
      button.disabled = true;
      buttonText.classList.add('hidden');
      buttonSpinner.classList.remove('hidden');
      errorDiv.classList.add('hidden');
      
      try {
        // Collect form data
        const formData = {
          given_name: document.getElementById('gc-given-name').value,
          family_name: document.getElementById('gc-family-name').value,
          email: document.getElementById('gc-email').value,
          address_line1: document.getElementById('gc-address-line1').value,
          city: document.getElementById('gc-city').value,
          postal_code: document.getElementById('gc-postal-code').value,
          country_code: document.getElementById('gc-country-code').value
        };
        
        // Create redirect flow
        const response = await fetch('/gocardless/create_redirect_flow', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify(formData)
        });
        
        const data = await response.json();
        
        if (data.success) {
          // Redirect to GoCardless authorization page
          window.location.href = data.redirect_url;
        } else {
          throw new Error(data.error || 'Failed to create redirect flow');
        }
        
      } catch (error) {
        console.error('GoCardless error:', error);
        errorMessage.textContent = error.message;
        errorDiv.classList.remove('hidden');
      } finally {
        // Reset button state
        button.disabled = false;
        buttonText.classList.remove('hidden');
        buttonSpinner.classList.add('hidden');
      }
    });
  }
});
</script>
